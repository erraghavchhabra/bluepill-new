// filepath: c:\Users\Puneet Bajaj\Desktop\Ankit\ankitnewform\src\features\simulationUseCase\useCaseForms\AttributionForm.tsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Button from '../../../components/Button';
import Card from '../../../components/Card';
import { User, Info, ArrowLeft } from 'lucide-react';
import { useAudience } from '../../../context/AudienceContext';

interface AttributionFormProps {
  onSubmit: () => void;
  selectedSegmentIds: number[];
  onBack: () => void;
}

interface Segment {
  id: number;
  name: string;
  description: string;
  len: number; // Number of personas
  created_at: string;
  updated_at: string;
}

const API_URL = import.meta.env.VITE_API_URL || '';

const AttributionForm: React.FC<AttributionFormProps> = ({ onSubmit, selectedSegmentIds, onBack }) => {
  const navigate = useNavigate();
  const { audienceData } = useAudience();
  const [segments, setSegments] = useState<Segment[]>([]);
  const [funnelStages, setFunnelStages] = useState(['']);
  const [objective, setObjective] = useState('');
  const [mode, setMode] = useState<'attribution' | 'reverse' | ''>('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  useEffect(() => {
    const fetchSegments = async () => {
      if (!audienceData.audienceId) return;
      
      setLoading(true);
      try {
        const response = await fetch(`${API_URL}/audience/${audienceData.audienceId}/segments`, {
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch segments');
        }
        
        const data = await response.json();
        // Filter segments to only include the selected ones
        const filteredSegments = data.filter((segment: Segment) => 
          selectedSegmentIds.includes(segment.id)
        );
        setSegments(filteredSegments);
        setError(null);
      } catch (err) {
        console.error('Error fetching segments:', err);
        setError('Failed to load segments. Please try again.');
      } finally {
        setLoading(false);
      }
    };
    
    fetchSegments();
  }, [audienceData.audienceId, selectedSegmentIds]);
  
  // No need for segment toggling as segments are passed down as props
  
  const handleStageChange = (index: number, value: string) => {
    const newStages = [...funnelStages];
    newStages[index] = value;
    setFunnelStages(newStages);
  };
  
  const addStage = () => {
    setFunnelStages([...funnelStages, '']);
  };
  
  const removeStage = (index: number) => {
    if (funnelStages.length > 1) {
      const newStages = funnelStages.filter((_, i) => i !== index);
      setFunnelStages(newStages);
    }
  };
  
  const isFormValid = selectedSegmentIds.length > 0 && 
                      funnelStages.every(stage => stage.trim() !== '') && 
                      objective !== '' &&
                      mode !== '';

  // Handle form submission
  const handleSubmit = async () => {
    if (!isFormValid || isSubmitting) return;
    
    setIsSubmitting(true);
    
    try {
      // Prepare the simulation data
      const simulationData = {
        audience_id: audienceData.audienceId,
        segment_ids: selectedSegmentIds,
        task: 'attribution',
        objective: objective,
        attribution_mode: mode,
        funnel_stages: funnelStages
      };
      
      // Send the request to start a simulation
      const response = await fetch(`${API_URL}/simulations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(simulationData)
      });
      
      if (!response.ok) {
        throw new Error('Failed to start simulation');
      }
      
      const data = await response.json();
      
      // Move to the results page with the simulation ID
      navigate(`/simulation-results/${data.simulation_id}`, { state: { simulationId: data.simulation_id } });
      
    } catch (err) {
      console.error('Error starting simulation:', err);
      setError('Failed to start simulation. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm p-6">
      <div className="mb-6">
        <div className="flex justify-between items-center mb-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={onBack}
            icon={<ArrowLeft className="w-4 h-4 mr-1" />}
          >
            Back to use case selection
          </Button>
          <span className="text-sm text-gray-500">{selectedSegmentIds.length} segments selected</span>
        </div>
        
        {loading ? (
          <div className="flex justify-center items-center py-6">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
          </div>
        ) : error ? (
          <div className="text-sm text-red-600 mb-3">
            {error}
          </div>
        ) : (
          <div className="p-3 bg-blue-50 rounded-md mb-4">
            <p className="text-sm text-blue-800">Attribution analysis with {segments.length} selected segments</p>
          </div>
        )}
      </div>
      
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <label className="block text-sm font-medium text-gray-700">
            Campaign Sequence / Funnel Stages
          </label>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={addStage}
          >
            Add Stage
          </Button>
        </div>
        
        {funnelStages.map((stage, index) => (
          <div key={index} className="mb-3 relative">
            <input
              type="text"
              className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={stage}
              onChange={(e) => handleStageChange(index, e.target.value)}
              placeholder={`Stage ${index + 1} (e.g., "Email campaign", "Social ads", "Website visit")`}
            />
            {funnelStages.length > 1 && (
              <button
                type="button"
                className="absolute top-2 right-2 text-gray-400 hover:text-gray-600"
                onClick={() => removeStage(index)}
              >
                <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            )}
          </div>
        ))}
      </div>
      
      <div className="mb-6">
        <label htmlFor="objective" className="block text-sm font-medium text-gray-700 mb-2">
          Objective
        </label>
        <select
          id="objective"
          className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          value={objective}
          onChange={(e) => setObjective(e.target.value)}
        >
          <option value="">Select an objective</option>
          <option value="conversion">Conversion</option>
          <option value="activation">Activation</option>
          <option value="engagement">Engagement</option>
          <option value="recall">Brand Recall</option>
        </select>
      </div>
      
      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Attribution Mode
        </label>
        <div className="grid grid-cols-2 gap-3">
          <Card
            onClick={() => setMode('attribution')}
            selected={mode === 'attribution'}
            className="p-3"
            hoverable={true}
          >
            <div className="flex items-center">
              <div className={`w-4 h-4 rounded-full mr-2 ${mode === 'attribution' ? 'bg-blue-600' : 'border border-gray-300'}`}>
                {mode === 'attribution' && (
                  <div className="w-full h-full rounded-full bg-white transform scale-50"></div>
                )}
              </div>
              <div>
                <span className="font-medium">Attribution</span>
                <p className="text-xs text-gray-600">Identify what drives success</p>
              </div>
            </div>
          </Card>
          
          <Card
            onClick={() => setMode('reverse')}
            selected={mode === 'reverse'}
            className="p-3"
            hoverable={true}
          >
            <div className="flex items-center">
              <div className={`w-4 h-4 rounded-full mr-2 ${mode === 'reverse' ? 'bg-blue-600' : 'border border-gray-300'}`}>
                {mode === 'reverse' && (
                  <div className="w-full h-full rounded-full bg-white transform scale-50"></div>
                )}
              </div>
              <div>
                <span className="font-medium">Reverse Attribution</span>
                <p className="text-xs text-gray-600">Analyze why things failed</p>
              </div>
            </div>
          </Card>
        </div>
      </div> 
      
      <div className="flex justify-end">
        <Button
          variant="primary"
          onClick={handleSubmit}
          disabled={!isFormValid || isSubmitting}
          withArrow
        >
          {isSubmitting ? 'Analyzing...' : 'Run Attribution Analysis'}
        </Button>
      </div>
    </div>
  );
};

export default AttributionForm;
